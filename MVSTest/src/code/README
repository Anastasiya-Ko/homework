Примерная аналогия, если во всём этом бардаке можно выстроить что-то более или менее осмысленное.

1)В секретном бункере есть секретный шкаф в котором хранится информация о разведчиках- это то что лежит в dao.
Причём DataSource - это и есть весь шкаф со всем содержимым.
UserDao- это отдельные дела всех шпионов.
Можно получить дело конкретного шпиона, можно список всех, можно добавить нового, обновить.
(ну как можно? функционально это можно, но на деле бункер то секретный и просто так первый попавшийся это сделать не может)

2)Что бы по секретным бункерам не шлялись всякие, на входе стоит солдат с автоматом.
Ежели что надо, то он сам заходит внутрь бункера, берёт личные дела разведчиков и исполняет приказ. Это UserService.
Он может создать, обновить, получить по id, имени, списки по уровню или активности, может даже удалить(пометить как deleted).

3)Что бы информацию узнавали простые люди нужно какое-то связующее звено,
какой-нибудь юркий журналист, который её у солдата охраняющего бункер узнает и передаст страждущим. Это журналист - MainModel.
Он втирается в доверие к солдату и просит его предоставить нужную информацию-
дай ка мне такого то шпиона по имени, по id, вообще дай список всех и тд.
Солдат уходит в бункер, запоминает нужную информацию и пересказывает её журналисту.
Журналист записывает всё услышанное в блокнот. Этот блокнот со всей услышанной информацией- ModelData.

4)Теперь информацию нужно распространить среди людей.
Поэтому журналист передаёт этот блокнот с записями в редакцию(это Controller)
и уже редактора выкладывают её на главную страницу сайта своей газеты. Сайт это- View.
Причём какую информацию показать могут решить пользователи. Может им нужны только списки убитых шпионов,
или может какие-то шпионы им не нравятся и они не хотят их видеть в списке.
Пользователи отправляют запрос на сайте через обратную связь,
редактора просят журналиста подправить свои блокнотные записи в соответствии с требованиями и выкладывают уже новые данные на сайт.


View
По сути интерфейс для пользователя. Ловит инпут от пользователя и распечатывает конечный результат.

Controller
Реагирует на инпут от пользовател и управляет моделью.

Model
Взаимодействует с сервисами, чтобы получить необходимую информацию.

ModelData
Место, где хранится скомпилированная для пользователя информация.

DAO
Интерфейс для работы с базой